// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole   @default(CUSTOMER)
  needPasswordChange Boolean    @default(false)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relationships
  admin    Admin?
  customer Customer?
  vendor   Vendor?

  @@map("users")
}

model Admin {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  phoneNumber  String
  profilePhoto String?
  designation  String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Customer {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  phoneNumber  String
  profilePhoto String?
  address      String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  user User @relation(fields: [email], references: [email])

  @@map("customers")
}

model Vendor {
  id                 String   @id @default(uuid())
  email              String   @unique
  name               String
  phoneNumber        String
  profilePhoto       String?
  tradeLicenseNumber String?
  taxId              String?
  businessAddress    String?
  isDeleted          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relationships
  user User  @relation(fields: [email], references: [email])
  shop Shop?

  @@map("vendors")
}

model Shop {
  id          String   @id @default(uuid())
  vendorId    String   @unique
  name        String   @unique
  description String
  logoUrl     String
  phoneNumber String
  shopAddress String
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  vendor Vendor @relation(fields: [vendorId], references: [id])

  @@map("shops")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentType {
  ONLINE
  COD
}

enum PaymentStatus {
  PAID
  UNPAID
}
