// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole   @default(CUSTOMER)
  needPasswordChange Boolean    @default(false)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relationships
  admin    Admin?
  customer Customer?
  vendor   Vendor?

  @@map("users")
}

model Admin {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  phoneNumber  String
  profilePhoto String?  @default("https://cdn-icons-png.flaticon.com/512/6596/6596121.png")
  designation  String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  user          User            @relation(fields: [email], references: [email])
  adminActivity AdminActivity[]

  @@map("admins")
}

model Customer {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  phoneNumber  String
  profilePhoto String?  @default("https://cdn-icons-png.flaticon.com/512/6596/6596121.png")
  address      String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  user                User                  @relation(fields: [email], references: [email])
  order               Order[]
  review              Review[]
  followedShop        FollowedShop[]
  recentViewedProduct RecentViewedProduct[]

  @@map("customers")
}

model Vendor {
  id                 String   @id @default(uuid())
  email              String   @unique
  name               String
  phoneNumber        String
  profilePhoto       String?  @default("https://cdn-icons-png.flaticon.com/512/6596/6596121.png")
  tradeLicenseNumber String?
  taxId              String?
  businessAddress    String?
  isDeleted          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relationships
  user User  @relation(fields: [email], references: [email])
  shop Shop?

  @@map("vendors")
}

model Shop {
  id          String     @id @default(uuid())
  vendorId    String     @unique
  name        String     @unique
  description String
  logoUrl     String
  phoneNumber String
  shopAddress String
  status      ShopStatus @default(ACTIVE)
  isDeleted   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relationships
  vendor       Vendor         @relation(fields: [vendorId], references: [id])
  product      Product[]
  order        Order[]
  followedShop FollowedShop[]

  @@map("shops")
}

model Product {
  id          String   @id @default(uuid())
  shopId      String
  categoryId  String
  name        String
  description String
  price       Float
  stock       Int
  discount    Float
  images      String[]
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  shop                Shop                  @relation(fields: [shopId], references: [id])
  category            Category              @relation(fields: [categoryId], references: [id])
  orderItem           OrderItem[]
  review              Review[]
  flashSale           FlashSale[]
  recentViewedProduct RecentViewedProduct[]

  @@map("products")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  parentId    String?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  product Product[]

  @@map("categories")
}

model Order {
  id            String             @id @default(uuid())
  customerId    String
  shopId        String
  totalAmount   Float
  status        OrderStatus        @default(PROCESSING)
  paymentType   PaymentType
  paymentStatus OrderPaymentStatus @default(UNPAID)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  // Relationships
  customer  Customer    @relation(fields: [customerId], references: [id])
  shop      Shop        @relation(fields: [shopId], references: [id])
  orderItem OrderItem[]
  payment   Payment[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  discount  Float?

  // Relationships
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String?
  productId  String
  customerId String
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  product  Product  @relation(fields: [productId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])

  @@map("reviews")
}

model FlashSale {
  id              String   @id @default(uuid())
  productId       String
  title           String
  discountPercent Float
  startTime       DateTime
  endTime         DateTime
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  product Product @relation(fields: [productId], references: [id])

  @@map("flash_sales")
}

model Coupon {
  id             String   @id @default(uuid())
  code           String   @unique
  discountAmount Float
  startTime      DateTime
  endTime        DateTime
  usageLimit     Int
  usedCount      Int
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("coupons")
}

model FollowedShop {
  id         String   @id @default(uuid())
  customerId String
  shopId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  customer Customer @relation(fields: [customerId], references: [id])
  shop     Shop     @relation(fields: [shopId], references: [id])

  @@map("followed_shops")
}

model RecentViewedProduct {
  id         String   @id @default(uuid())
  customerId String
  productId  String
  viewedAt   DateTime

  // Relationships
  customer Customer @relation(fields: [customerId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@map("recent_viewed_products")
}

model AdminActivity {
  id        String   @id @default(uuid())
  adminId   String
  action    String
  details   String
  createdAt DateTime @default(now())

  // Relationships
  admin Admin @relation(fields: [adminId], references: [id])

  @@map("admin_activities")
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String
  transactionId String?
  amount        Float
  paymentMethod PaymentMethod @default(AMARPAY)
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum ShopStatus {
  ACTIVE
  PENDING
  SUSPENDED
  BLOCKED
  DELETED
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentType {
  ONLINE
  COD
}

enum OrderPaymentStatus {
  PAID
  UNPAID
}

enum PaymentMethod {
  STRIPE
  AMARPAY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
